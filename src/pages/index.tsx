import React from 'react'
import Head from 'next/head'
import { GetStaticProps } from 'next'

import ptBR from 'date-fns/locale/pt-BR'
import { format, parseISO } from 'date-fns'

import { api } from '../services/api'
import { formatedDurationTimeEpisode } from '../utils/formatedDurationTimeEpisode'

import { Container, Content } from '../styles/pages/index'
import CardEpisodePodcast from '../components/CardEpisodePodcast'
import TableEpisodesPodcast from '../components/TableEpisodesPodcast'

interface episode {
  id: string
  title: string
  members: string
  thumbnail: string
  description: string
  publishedAt: Date
  url: string
  type: string
  duration: number
  durationFormated: number
}

interface episodeJSON {
  id: string
  title: string
  members: string
  thumbnail: string
  description: string
  published_at: string
  file: {
    url: string
    type: string
    duration: number
  }
}

interface HomeDataProps {
  latestEpisodesPodcast: Array<episode>
  allEpisodesPodcast: Array<episode>
}

const Home: React.FC<HomeDataProps> = ({
  latestEpisodesPodcast,
  allEpisodesPodcast
}) => {
  return (
    <Container>
      <Head>
        <title>prisma.cast | O melhor para você ouvir, sempre!</title>

        <meta name="description" content="Generated by create next app" />
      </Head>

      <Content>
        <section className="latestReleases">
          <h2>Últimos lançamentos</h2>
          <div className="cardEpisode">
            {latestEpisodesPodcast.map(data => {
              return (
                <CardEpisodePodcast
                  key={data.id}
                  id={data.id}
                  title={data.title}
                  members={data.members}
                  thumbnail={data.thumbnail}
                  publishedAt={data.publishedAt}
                  durationFormated={data.durationFormated}
                />
              )
            })}
          </div>
        </section>
        <section className="allEpisodes">
          <h2>Todos os episódios</h2>
          <table cellSpacing="0">
            <thead>
              <tr className="headTableEpisodes">
                <td>PODCAST</td>
                <td>INTEGRATES</td>
                <td>DATA</td>
                <td>DURAÇÃO</td>
                <td>&nbsp;</td>
              </tr>
            </thead>
            <tbody>
              {allEpisodesPodcast.map(data => {
                return (
                  <TableEpisodesPodcast
                    key={data.id}
                    id={data.id}
                    title={data.title}
                    members={data.members}
                    thumbnail={data.thumbnail}
                    publishedAt={data.publishedAt}
                    durationFormated={data.durationFormated}
                    episodeSelected={data}
                  />
                )
              })}
            </tbody>
          </table>
        </section>
      </Content>
    </Container>
  )
}

export default Home

export const getStaticProps: GetStaticProps = async () => {
  const { data } = await api.get('episodes', {
    params: {
      _limit: 12,
      _sort: 'published_at',
      _order: 'desc'
    }
  })

  const episodesFormated: Array<episode> = data.map(function (ep: episodeJSON) {
    return {
      id: ep.id,
      title: ep.title,
      members: ep.members,
      thumbnail: ep.thumbnail,
      description: ep.description,
      publishedAt: format(parseISO(ep.published_at), 'd MMM yy', {
        locale: ptBR
      }),
      url: ep.file.url,
      type: ep.file.type,
      duration: ep.file.duration,
      durationFormated: formatedDurationTimeEpisode(ep.file.duration)
    }
  })

  const latestEpisodesPodcast = episodesFormated.slice(0, 2)
  const allEpisodesPodcast = episodesFormated.slice(2, episodesFormated.length)

  return {
    props: {
      latestEpisodesPodcast,
      allEpisodesPodcast
    },
    revalidate: 3600 * 1
  }
}
